# ===================================================================
# GRAFANA INSTANCE CONFIGURATION
# ===================================================================
# This file defines EC2 and related resources for Grafana visualization

# Get current AWS account ID for use in resource configuration
data "aws_caller_identity" "current" {}

# Create key pair for SSH access to the Grafana instance
resource "aws_key_pair" "grafana" {
  key_name   = var.ssh_key_name
  public_key = file("${path.module}/${var.ssh_key_path}")  # Use local SSH public key generated by scripts/generate_ssh_key.sh
  
  tags = var.tags
}

# Security group for Grafana instance
resource "aws_security_group" "grafana" {
  name        = var.security_group_name
  description = "Allow traffic for Grafana"
  vpc_id      = var.vpc_id
  
  # Allow SSH traffic from specified CIDR block
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.allowed_ssh_cidr] # Configurable for production
  }
  
  # Allow Grafana web traffic from specified CIDR block
  ingress {
    from_port   = 3000
    to_port     = 3000
    protocol    = "tcp"
    cidr_blocks = [var.allowed_grafana_cidr] # Configurable for production
    description = "Grafana web interface"
  }
  
  # Allow Prometheus web UI access
  ingress {
    from_port   = 9090
    to_port     = 9090
    protocol    = "tcp"
    cidr_blocks = [var.allowed_prometheus_cidr]
    description = "Prometheus web UI"
  }
  
  # Allow Node Exporter metrics access (internal only)
  ingress {
    from_port   = 9100
    to_port     = 9100
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"] # TODO: Restrict these CIDR blocks in production
    description = "Node Exporter metrics (internal)"
  }
  
  # Allow YACE metrics access (internal only)
  ingress {
    from_port   = 5000
    to_port     = 5000
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"] # TODO: Restrict these CIDR blocks in production
    description = "YACE metrics (internal)"
  }
  
  # Allow all outbound traffic
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = var.tags
}

# IAM Role for Grafana EC2 instance
resource "aws_iam_role" "grafana_instance" {
  name = var.grafana_role_name
  
  # Trust policy allowing EC2 and self-assume
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      },
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          AWS = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/${var.grafana_role_name}"
        }
      }
    ]
  })
  
  tags = var.tags
}

# IAM Instance Profile for attaching role to EC2
resource "aws_iam_instance_profile" "grafana" {
  name = var.grafana_profile_name
  role = aws_iam_role.grafana_instance.name
  
  tags = var.tags
}

# IAM Policy for Grafana to access Athena and S3
resource "aws_iam_role_policy" "grafana_athena" {
  name = var.grafana_policy_name
  role = aws_iam_role.grafana_instance.id
  
  # Grant permissions to query Athena and access S3 results
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "athena:StartQueryExecution",
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:StopQueryExecution",
          "athena:ListDatabases",
          "athena:ListTableMetadata",
          "athena:GetTableMetadata"
        ]
        Effect   = "Allow"
        Resource = "*"
      },
      {
        Action = [
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads",
          "s3:ListMultipartUploadParts",
          "s3:AbortMultipartUpload",
          "s3:PutObject"
        ]
        Effect   = "Allow"
        Resource = [
          "arn:aws:s3:::${var.athena_results_bucket}",
          "arn:aws:s3:::${var.athena_results_bucket}/*"
        ]
      },
      {
        Action = [
          "glue:GetDatabases",
          "glue:GetTables",
          "glue:GetTable"
        ]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

# IAM Policy for Grafana to access Timestream
resource "aws_iam_role_policy" "grafana_timestream" {
  name = "grafana-timestream-policy"
  role = aws_iam_role.grafana_instance.id
  
  # Grant permissions to query Timestream
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "timestream:DescribeEndpoints",
          "timestream:SelectValues",
          "timestream:CancelQuery",
          "timestream:ListDatabases",
          "timestream:ListTables",
          "timestream:ListMeasures",
          "timestream:DescribeDatabase",
          "timestream:DescribeTable"
        ]
        Effect   = "Allow"
        Resource = "*"
      },
      {
        Action = [
          "kms:Decrypt"
        ]
        Effect   = "Allow"
        Resource = var.timestream_kms_key_arn
      }
    ]
  })
}

# IAM Policy for CloudWatch monitoring access
resource "aws_iam_role_policy" "grafana_monitoring" {
  name = "grafana-monitoring-policy"
  role = aws_iam_role.grafana_instance.id
  
  # Grant permissions to access CloudWatch metrics for Prometheus/YACE
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:GetMetricData",
          "cloudwatch:DescribeAlarms",
          "tag:GetResources"
        ]
        Effect   = "Allow"
        Resource = "*"
      },
      {
        Action = [
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "logs:FilterLogEvents"
        ]
        Effect   = "Allow"
        Resource = "*"
      },
      {
        Action = [
          "connect:ListInstances",
          "connect:DescribeInstance",
          "kinesis:ListStreams",
          "kinesis:DescribeStream",
          "firehose:ListDeliveryStreams",
          "firehose:DescribeDeliveryStream"
        ]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

# Find latest Amazon Linux 2 AMI for EC2 instance
data "aws_ami" "amazon_linux" {
  most_recent = true
  owners      = ["amazon"]
  
  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }
}

# Create EC2 instance for Grafana
resource "aws_instance" "grafana" {
  ami                    = data.aws_ami.amazon_linux.id
  instance_type          = var.instance_type
  subnet_id              = var.subnet_id
  vpc_security_group_ids = [aws_security_group.grafana.id]
  iam_instance_profile   = aws_iam_instance_profile.grafana.name
  key_name               = aws_key_pair.grafana.key_name
  
  # Bootstrap script for instance setup
  user_data = <<-EOF
    #!/bin/bash
    yum update -y
    amazon-linux-extras install docker -y
    service docker start
    usermod -a -G docker ec2-user
    chkconfig docker on
    
    # Install Docker Compose
    curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    
    # Create monitoring directory structure
    mkdir -p /home/ec2-user/monitoring/{prometheus,yace,grafana,node-exporter}/config
    chown -R ec2-user:ec2-user /home/ec2-user/monitoring
    
    # Create Prometheus configuration
    cat > /home/ec2-user/monitoring/prometheus/config/prometheus.yml <<'PROM_CONFIG'
    global:
      scrape_interval: ${var.scrape_interval}s
      evaluation_interval: ${var.scrape_interval}s
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
    
      - job_name: 'node'
        static_configs:
          - targets: ['node-exporter:9100']
    
      - job_name: 'cloudwatch'
        static_configs:
          - targets: ['yace:5000']
            
      - job_name: 'grafana'
        static_configs:
          - targets: ['grafana:3000']
    PROM_CONFIG
    
    # Create YACE configuration for AWS Connect metrics
    cat > /home/ec2-user/monitoring/yace/config/yace.yml <<'YACE_CONFIG'
    ${templatefile("${path.module}/yace.yml.tpl", {
      aws_region      = var.aws_region,
      yace_namespaces = var.yace_namespaces
    })}
    YACE_CONFIG
    
    # Create dashboards and provisioning directories
    mkdir -p /home/ec2-user/monitoring/grafana/dashboards
    mkdir -p /home/ec2-user/monitoring/grafana/provisioning/dashboards
    
    # Create dashboard provisioning configuration
    cat > /home/ec2-user/monitoring/grafana/provisioning/dashboards/dashboards.yaml <<'DASHBOARD_PROVISIONING'
    apiVersion: 1
    
    providers:
      - name: 'default'
        orgId: 1
        folder: 'Connect'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /etc/grafana/provisioning/dashboards
          foldersFromFilesStructure: false
    DASHBOARD_PROVISIONING
    
    # Copy dashboard JSON files to the provisioning directory
    cat > /home/ec2-user/monitoring/grafana/provisioning/dashboards/contact_events.json <<'CONTACT_EVENTS_DASHBOARD'
${file("${path.module}/dashboards/contact_events.json")}
CONTACT_EVENTS_DASHBOARD

    cat > /home/ec2-user/monitoring/grafana/provisioning/dashboards/agent_events.json <<'AGENT_EVENTS_DASHBOARD'
${file("${path.module}/dashboards/agentevents.json")}
AGENT_EVENTS_DASHBOARD

    # Create Docker Compose file
    cat > /home/ec2-user/monitoring/docker-compose.yml <<'COMPOSE'
    version: '3'
    services:
      grafana:
        image: grafana/grafana:latest
        container_name: grafana
        restart: unless-stopped
        ports:
          - "3000:3000"
        volumes:
          - grafana-data:/var/lib/grafana
          - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
          - ./grafana/provisioning:/etc/grafana/provisioning
        environment:
          - GF_INSTALL_PLUGINS=grafana-athena-datasource,grafana-prometheus-datasource,grafana-timestream-datasource
          - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/contact_events.json
        networks:
          - monitoring
      
      prometheus:
        image: prom/prometheus:v${var.prometheus_version}
        container_name: prometheus
        restart: unless-stopped
        ports:
          - "9090:9090"
        volumes:
          - ./prometheus/config:/etc/prometheus
          - prometheus-data:/prometheus
        command:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--storage.tsdb.retention.time=${var.retention_days}d'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
        networks:
          - monitoring
      
      node-exporter:
        image: prom/node-exporter:v${var.node_exporter_version}
        container_name: node-exporter
        restart: unless-stopped
        volumes:
          - /proc:/host/proc:ro
          - /sys:/host/sys:ro
          - /:/rootfs:ro
        command:
          - '--path.procfs=/host/proc'
          - '--path.sysfs=/host/sys'
          - '--path.rootfs=/rootfs'
        networks:
          - monitoring
      
      yace:
        image: quay.io/observatorium/yet-another-cloudwatch-exporter:v${var.yace_version}
        container_name: yace
        restart: unless-stopped
        volumes:
          - ./yace/config:/config
        environment:
          - AWS_SDK_LOAD_CONFIG=true
        command:
          - '--config.file=/config/yace.yml'
        networks:
          - monitoring
    
    networks:
      monitoring:
        driver: bridge
    
    volumes:
      grafana-data:
        driver: local
      prometheus-data:
        driver: local
    COMPOSE
    
    # Create management script
    mkdir -p /home/ec2-user/scripts
    cat > /home/ec2-user/scripts/update_monitoring.sh <<'SCRIPT'
    #!/bin/bash
    
    # Configuration Variables
    PROMETHEUS_CONFIG_PATH="/home/ec2-user/monitoring/prometheus/config/prometheus.yml"
    YACE_CONFIG_PATH="/home/ec2-user/monitoring/yace/config/yace.yml"
    
    # Function to reload Prometheus config
    reload_prometheus() {
      curl -X POST http://localhost:9090/-/reload
      echo "Prometheus configuration reloaded"
    }
    
    # Function to restart YACE container
    restart_yace() {
      docker restart yace
      echo "YACE service restarted"
    }
    
    # Function to restart all monitoring services
    restart_all() {
      cd /home/ec2-user/monitoring
      docker-compose restart
      echo "All monitoring services restarted"
    }
    
    # Menu
    case "$1" in
      reload-prometheus)
        reload_prometheus
        ;;
      restart-yace)
        restart_yace
        ;;
      restart-all)
        restart_all
        ;;
      *)
        echo "Usage: $0 {reload-prometheus|restart-yace|restart-all}"
        exit 1
        ;;
    esac
    SCRIPT
    
    # Make script executable
    chmod +x /home/ec2-user/scripts/update_monitoring.sh
    
    # Start monitoring stack
    cd /home/ec2-user/monitoring
    docker-compose up -d
    
    # Wait for Grafana to start
    sleep 10
    
    # Install Athena plugin directly (it may not have been picked up from the environment variable)
    docker exec grafana grafana-cli plugins install grafana-athena-datasource
    
    # Configure Prometheus datasource in Grafana
    curl -X POST http://admin:admin@localhost:3000/api/datasources \
      -H "Content-Type: application/json" \
      -d '{
        "name": "Prometheus",
        "type": "prometheus",
        "url": "http://prometheus:9090",
        "access": "proxy",
        "isDefault": false
      }'
      
    # Configure Athena datasource in Grafana
    curl -X POST http://admin:admin@localhost:3000/api/datasources \
      -H "Content-Type: application/json" \
      -d '{
        "name": "Athena",
        "type": "grafana-athena-datasource",
        "jsonData": {
          "authType": "default",
          "defaultRegion": "${var.aws_region}",
          "catalog": "AwsDataCatalog",
          "database": "${var.glue_database_name}",
          "workgroup": "${var.athena_workgroup}",
          "outputLocation": "s3://${var.athena_results_bucket}/output/"
        },
        "access": "proxy",
        "isDefault": false
      }'
      
    # Configure Timestream datasource in Grafana
    curl -X POST http://admin:admin@localhost:3000/api/datasources \
      -H "Content-Type: application/json" \
      -d '{
        "name": "Timestream",
        "type": "grafana-timestream-datasource",
        "jsonData": {
          "authType": "default",
          "defaultRegion": "${var.aws_region}",
          "defaultDatabase": "${var.timestream_database_name}"
        },
        "access": "proxy",
        "isDefault": true
      }'
  EOF
  
  tags = var.tags
}
