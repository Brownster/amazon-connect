# ===================================================================
# GRAFANA INSTANCE CONFIGURATION
# ===================================================================
# This file defines EC2 and related resources for Grafana visualization

# Get current AWS account ID for use in resource configuration
data "aws_caller_identity" "current" {}

# Create key pair for SSH access to the Grafana instance
resource "aws_key_pair" "grafana" {
  key_name   = var.ssh_key_name
  public_key = file("${path.module}/${var.ssh_key_path}")  # Use local SSH public key generated by scripts/generate_ssh_key.sh
  
  tags = var.tags
}

# Security group for Grafana instance
resource "aws_security_group" "grafana" {
  name        = var.security_group_name
  description = "Allow traffic for Grafana"
  vpc_id      = var.vpc_id
  
  # Allow SSH traffic from specified CIDR block
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.allowed_ssh_cidr] # Configurable for production
  }
  
  # Allow Grafana web traffic from specified CIDR block
  ingress {
    from_port   = 3000
    to_port     = 3000
    protocol    = "tcp"
    cidr_blocks = [var.allowed_grafana_cidr] # Configurable for production
  }
  
  # Allow all outbound traffic
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = var.tags
}

# IAM Role for Grafana EC2 instance
resource "aws_iam_role" "grafana_instance" {
  name = var.grafana_role_name
  
  # Trust policy allowing EC2 and self-assume
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      },
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          AWS = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/${var.grafana_role_name}"
        }
      }
    ]
  })
  
  tags = var.tags
}

# IAM Instance Profile for attaching role to EC2
resource "aws_iam_instance_profile" "grafana" {
  name = var.grafana_profile_name
  role = aws_iam_role.grafana_instance.name
  
  tags = var.tags
}

# IAM Policy for Grafana to access Athena and S3
resource "aws_iam_role_policy" "grafana_athena" {
  name = var.grafana_policy_name
  role = aws_iam_role.grafana_instance.id
  
  # Grant permissions to query Athena and access S3 results
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "athena:StartQueryExecution",
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:StopQueryExecution",
          "athena:ListDatabases",
          "athena:ListTableMetadata",
          "athena:GetTableMetadata"
        ]
        Effect   = "Allow"
        Resource = "*"
      },
      {
        Action = [
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads",
          "s3:ListMultipartUploadParts",
          "s3:AbortMultipartUpload",
          "s3:PutObject"
        ]
        Effect   = "Allow"
        Resource = [
          "arn:aws:s3:::${var.athena_results_bucket}",
          "arn:aws:s3:::${var.athena_results_bucket}/*"
        ]
      },
      {
        Action = [
          "glue:GetDatabases",
          "glue:GetTables",
          "glue:GetTable"
        ]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

# Find latest Amazon Linux 2 AMI for EC2 instance
data "aws_ami" "amazon_linux" {
  most_recent = true
  owners      = ["amazon"]
  
  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }
}

# Create EC2 instance for Grafana
resource "aws_instance" "grafana" {
  ami                    = data.aws_ami.amazon_linux.id
  instance_type          = var.instance_type
  subnet_id              = var.subnet_id
  vpc_security_group_ids = [aws_security_group.grafana.id]
  iam_instance_profile   = aws_iam_instance_profile.grafana.name
  key_name               = aws_key_pair.grafana.key_name
  
  # Bootstrap script for instance setup
  user_data = <<-EOF
    #!/bin/bash
    yum update -y
    amazon-linux-extras install docker -y
    service docker start
    usermod -a -G docker ec2-user
    chkconfig docker on
    
    # Install Docker Compose
    curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    
    # Create Grafana Docker Compose file
    mkdir -p /home/ec2-user/grafana
    cat > /home/ec2-user/grafana/docker-compose.yml <<'COMPOSE'
    version: '3'
    services:
      grafana:
        image: grafana/grafana:latest
        container_name: grafana
        restart: unless-stopped
        ports:
          - "3000:3000"
        volumes:
          - grafana-data:/var/lib/grafana
        environment:
          - GF_INSTALL_PLUGINS=grafana-athena-datasource
    volumes:
      grafana-data:
    COMPOSE
    
    cd /home/ec2-user/grafana
    docker-compose up -d
    
    # Wait for Grafana to start
    sleep 10
    
    # Install Athena plugin directly
    docker exec -it grafana grafana-cli plugins install grafana-athena-datasource
    
    # Restart Grafana to apply plugin
    docker-compose restart
  EOF
  
  tags = var.tags
}